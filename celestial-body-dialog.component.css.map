{
  "version": 3,
  "sources": ["node_modules/@angular/material/core/ripple/_ripple.scss", "node_modules/@angular/cdk/a11y/_index.scss", "node_modules/@angular/cdk/overlay/_index.scss", "node_modules/@angular/cdk/text-field/_index.scss", "node_modules/@angular/material/core/focus-indicators/_private.scss", "node_modules/@angular/material/core/style/_layout-common.scss", "node_modules/@angular/material/core/_core.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss", "src/m3-theme.scss", "node_modules/@angular/material/core/_core-theme.scss", "src/app/scene/celestial-body-dialog/celestial-body-dialog.component.scss"],
  "sourcesContent": ["@use '@angular/cdk';\n@use '../tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use '../tokens/token-utils';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    @include token-utils.use-tokens(\n      tokens-mat-ripple.$prefix, tokens-mat-ripple.get-token-slots()) {\n      // We have to emit a fallback value here, because some internal builds depend on it.\n      background-color: var(#{token-utils.get-token-variable(color)}, rgba(#000, 0.1));\n    }\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n\n    // Hide ripples inside cloned drag&drop elements since they won't go away.\n    .cdk-drag-preview &,\n    .cdk-drag-placeholder & {\n      display: none;\n    }\n  }\n}\n", "/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n", "// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n", "// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n", "@use 'sass:map';\n@use 'sass:meta';\n@use '@angular/cdk';\n@use '../style/layout-common';\n@use '../theming/theming';\n@use '../theming/inspection';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat');\n}\n\n@mixin mdc-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat-mdc');\n}\n\n@mixin strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat');\n  }\n}\n\n@mixin strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles($theme-or-color, 'mat-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n\n@mixin mdc-strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat-mdc');\n  }\n}\n\n@mixin mdc-strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles(\n        $theme-or-color, 'mat-mdc-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include mdc-strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n", "// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n", "@use '@angular/cdk';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/token-utils';\n@use './ripple/ripple';\n@use './style/elevation';\n@use './focus-indicators/private';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core() {\n  @include ripple.ripple();\n  @include cdk.a11y-visually-hidden();\n  @include cdk.overlay();\n  @include cdk.text-field-autosize();\n  @include cdk.text-field-autofill();\n  @include private.structural-styling('mat');\n  @include private.structural-styling('mat-mdc');\n\n  // Wrapper element that provides the theme background when the\n  // user's content isn't inside of a `mat-sidenav-container`.\n  @at-root {\n    // Note: we need to emit fallback values here to avoid errors in internal builds.\n    @include token-utils.use-tokens(tokens-mat-app.$prefix, tokens-mat-app.get-token-slots()) {\n      .mat-app-background {\n        @include token-utils.create-token-slot(background-color, background-color, transparent);\n        @include token-utils.create-token-slot(color, text-color, inherit);\n      }\n\n      // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n      // `mat-elevation-z$z-value` where `$z-value` corresponds to the z-space to which the element\n      // is elevated.\n      @for $z-value from 0 through 24 {\n        $selector: elevation.$prefix + $z-value;\n        // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n        // come with elevation baked in and we don't have a way of removing it.\n        .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n          @include token-utils.create-token-slot(box-shadow, 'elevation-shadow-level-#{$z-value}',\n            none);\n        }\n      }\n    }\n  }\n}\n", "@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:string';\n@use 'sass:color';\n@use 'sass:math';\n@use '../style/elevation';\n@use '../style/sass-utils';\n@use '../m2/palette' as m2-palette;\n@use '../m2/theming' as m2-theming;\n@use '../m2/typography' as m2-typography;\n@use './m3/definitions' as m3-token-definitions;\n\n// Indicates whether we're building internally. Used for backwards compatibility.\n$private-is-internal-build: false;\n\n$_placeholder-color-palette: m2-theming.define-palette(m2-palette.$red-palette);\n\n// Placeholder color config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-color-config: (\n  primary: $_placeholder-color-palette,\n  accent: $_placeholder-color-palette,\n  warn: $_placeholder-color-palette,\n  is-dark: false,\n  foreground: m2-palette.$light-theme-foreground-palette,\n  background: m2-palette.$light-theme-background-palette,\n);\n\n$_placeholder-typography-level-config: m2-typography.typography-config-level-from-mdc(body1);\n\n// Placeholder typography config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-typography-config: (\n  font-family: 'Roboto, sans-serif',\n  headline-1: $_placeholder-typography-level-config,\n  headline-2: $_placeholder-typography-level-config,\n  headline-3: $_placeholder-typography-level-config,\n  headline-4: $_placeholder-typography-level-config,\n  headline-5: $_placeholder-typography-level-config,\n  headline-6: $_placeholder-typography-level-config,\n  subtitle-1: $_placeholder-typography-level-config,\n  subtitle-2: $_placeholder-typography-level-config,\n  body-1: $_placeholder-typography-level-config,\n  body-2: $_placeholder-typography-level-config,\n  caption: $_placeholder-typography-level-config,\n  button: $_placeholder-typography-level-config,\n  overline: $_placeholder-typography-level-config,\n  subheading-1: $_placeholder-typography-level-config,\n  title: $_placeholder-typography-level-config,\n);\n\n// Placeholder density config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-density-config: 0;\n\n$_tokens: null;\n$_component-prefix: null;\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _get-css-variable($prefix, $name) {\n  @if $prefix == null or $name == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$name}');\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n@mixin create-token-slot($property, $token, $emit-fallback: false) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`create-token-slot` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n  @if map.get($_tokens, $token) != null {\n    $fallback: null;\n\n    @if ($emit-fallback == true) {\n      $fallback: map.get($_tokens, $token);\n    }\n    @else if ($emit-fallback) {\n      $fallback: $emit-fallback;\n    }\n\n    $var-name: _get-css-variable($_component-prefix, $token);\n    $var-reference: if($fallback == null, var(#{$var-name}), var(#{$var-name}, #{$fallback}));\n    #{$property}: #{$var-reference};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`get-token-variable` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return _get-css-variable($_component-prefix, $token);\n}\n\n// TODO(crisbeto): should be able to replace the usages of `get-token-variable` with this.\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n@function get-token-variable-reference($token, $emit-fallback: false) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`get-token-variable-reference` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  $var: get-token-variable($token);\n  $fallback: if($emit-fallback, map.get($_tokens, $token), null);\n\n  @if ($fallback != null) {\n    @return var($var, $fallback);\n  }\n  @else {\n    @return var($var);\n  }\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    @each $key, $value in $tokens {\n      @if $value != null {\n        #{_get-css-variable($prefix, $key)}: #{$value};\n      }\n    }\n  }\n}\n\n/// Gets all the MDC token values for a specific component. This function serves as single\n/// point at which we directly reference a specific version of the MDC tokens.\n/// @param {String} $component Name of the component for which to get the tokens\n/// @param {Map} $systems The MDC system tokens\n/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values\n/// @return {List} Map of token names to values\n@function get-mdc-tokens($component, $systems, $exclude-hardcoded) {\n  $full-name: 'md-comp-' + $component + '-values';\n  $fn: meta.get-function($name: $full-name, $module: 'm3-token-definitions');\n  @return meta.call($fn, $systems, $exclude-hardcoded);\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge($tokens, (\n    $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n    $shadow-color-token: null,\n  ));\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if($variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $token-maps...) {\n  @include _validate-token-overrides($overrides, $token-maps);\n\n  @each $token-map in $token-maps {\n    $prefix: map.get($token-map, prefix);\n    $tokens: map.get($token-map, tokens);\n\n    @each $name, $value in $tokens {\n      $tokens: map.set($tokens, $name, map.get($overrides, $name));\n    }\n\n    @include sass-utils.current-selector-or-root() {\n      @include create-token-values($prefix, $tokens);\n    }\n  }\n}\n\n/// Gets the MDC tokens for the given prefix, M3 token values, and supported token slots.\n/// @param {List} $prefix The token prefix for the given tokens.\n/// @param {Map|(Map, Map)} $values A map of M3 token values for the given prefix.\n///  This param may also be a tuple of maps, the first one representing the default M3 token values,\n//   and the second containing overrides for different color variants.\n//   Single map example:\n//     (token1: green, token2: 2px)\n//   Tuple example:\n//     (\n//       (token1: green, token2: 2px),\n//       (\n//         secondary: (token1: blue),\n//         error: (token1: red),\n//       )\n//     )\n/// @param {Map} $slots A map of token slots, with null value indicating the token is not supported.\n/// @param {String|null} $variant The name of the variant the token values are for.\n/// @return {Map} A map of fully qualified token names to values, for only the supported tokens.\n@function namespace-tokens($prefix, $values, $slots, $variant: null) {\n  $result: ();\n  @if $variant == null and meta.type-of($values) == 'list' and list.length($values == 2) {\n    $variants: list.nth($values, 2);\n    $values: list.nth($values, 1);\n    @each $variant, $overrides in $variants {\n      $result: map.merge($result, namespace-tokens($prefix, $overrides, $slots, $variant));\n    }\n  }\n  $used-token-names: map.keys(_filter-nulls(map.get($slots, $prefix)));\n  $used-m3-tokens: _pick(_filter-nulls($values), $used-token-names);\n  $prefix: if($variant == null, $prefix, list.append($prefix, $variant));\n  @return map.merge($result, ($prefix: $used-m3-tokens));\n}\n\n/// Hardcode the given value, or null if hardcoded values are excluded.\n@function hardcode($value, $exclude-hardcoded) {\n  @return if($exclude-hardcoded, null, $value);\n}\n\n/// Sets all of the standard typography tokens for the given token base name to the given typography\n/// level.\n/// @param {Map} $systems The MDC system tokens\n/// @param {String} $base-name The token base name to get the typography tokens for\n/// @param {String} $typography-level The typography level to base the token values on\n/// @return {Map} A map containing the typography tokens for the given base token name\n@function generate-typography-tokens($systems, $base-name, $typography-level) {\n  $result: ();\n  @each $prop in (font, line-height, size, tracking, weight) {\n    $result: map.set($result, #{$base-name}-#{$prop},\n      map.get($systems, md-sys-typescale, #{$typography-level}-#{$prop}));\n  }\n  @return $result;\n}\n\n/// Maps the values in a map to new values using the given mapping function\n/// @param {Map} $map The maps whose values will be mapped to new values.\n/// @param {Function} $fn The value mapping function.\n/// @param {Map} A new map with its values updated using the mapping function.\n@function map-values($map, $fn) {\n  $result: ();\n  @each $key, $value in $map {\n    $result: map.set($result, $key, meta.call($fn, $value));\n  }\n  @return $result;\n}\n\n/// Renames the keys in a map\n/// @param {Map} $map The map whose keys should be renamed\n/// @param {Map} $rename-keys A map of original key to renamed key to apply to $map\n/// @return {Map} The result of applying the given key renames to the given map.\n@function rename-map-keys($map, $rename-keys) {\n  $result: $map;\n  @each $old-key-name, $new-key-name in $rename-keys {\n    @if map.has-key($map, $old-key-name) {\n      $result: map.set($result, $new-key-name, map.get($map, $old-key-name));\n    }\n  }\n  @return $result;\n}\n\n/// At the time of writing, some color tokens (e.g. disabled state) are defined as a solid color\n/// token and a separate opacity token. This function applies the opacity to the color and drops the\n/// opacity key from the map. Can be removed once b/213331407 is resolved.\n/// @param {Map} $tokens The map of tokens currently being generated\n/// @param {Map} $all-tokens A map of all tokens, including hardcoded values\n/// @param {List} $pairs Pairs of color token names and their opacities. Should be in the shape of\n/// `((color: 'color-key', opacity: 'opacity-key'))`.\n/// @return {Map} The initial tokens with the combined color values.\n@function combine-color-tokens($tokens, $opacity-lookup, $pairs) {\n  $result: $tokens;\n\n  @each $pair in $pairs {\n    $color-key: map.get($pair, color);\n    $opacity-key: map.get($pair, opacity);\n    $color: map.get($tokens, $color-key);\n    $opacity: map.get($opacity-lookup, $opacity-key);\n\n    @if(meta.type-of($color) == 'color') {\n      $result: map.remove($result, $opacity-key);\n      $result: map.set($result, $color-key, rgba($color, $opacity));\n    }\n    @else if($color != null) {\n      $result: map.remove($result, $opacity-key);\n      $combined-color: #{color-mix(in srgb, #{$color} #{($opacity * 100) + '%'}, transparent)};\n      $result: map.set($result, $color-key, $combined-color);\n    }\n  }\n\n  @return $result;\n}\n\n/// Inherited function from MDC that computes which contrast tone to use on top of a color.\n/// This is used only in a narrow set of use cases when generating M2 button tokens to maintain\n/// backwards compatibility.\n/// @param {Color} $value Color for which we're calculating the contrast tone.\n/// @param {Boolean} $is-dark Whether the current theme is dark.\n/// @return {Map} Either `dark` or `light`.\n@function contrast-tone($value, $is-dark) {\n  @if ($value == 'dark') {\n    @return 'light';\n  }\n\n  @if ($value == 'light') {\n    @return 'dark';\n  }\n\n  // Fallback if the app is using a non-color palette (e.g. CSS variable based).\n  @if (meta.type-of($value) != 'color') {\n    @return if($is-dark, 'light', 'dark');\n  }\n\n  $minimum-contrast: 3.1;\n  $light-contrast: _contrast($value, #fff);\n  $dark-contrast: _contrast($value, rgba(0, 0, 0, 0.87));\n\n  @if ($light-contrast < $minimum-contrast) and ($dark-contrast > $light-contrast) {\n    @return 'dark';\n  }\n\n  @return 'light';\n}\n\n@function _linear-channel-value($channel-value) {\n  $normalized-channel-value: math.div($channel-value, 255);\n\n  @if ($normalized-channel-value < 0.03928) {\n    @return math.div($normalized-channel-value, 12.92);\n  }\n\n  @return math.pow(math.div($normalized-channel-value + 0.055, 1.055), 2.4);\n}\n\n// Calculate the luminance for a color.\n// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function _luminance($color) {\n  $red: _linear-channel-value(color.red($color));\n  $green: _linear-channel-value(color.green($color));\n  $blue: _linear-channel-value(color.blue($color));\n\n  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;\n}\n\n// Calculate the contrast ratio between two colors.\n// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function _contrast($back, $front) {\n  $back-lum: _luminance($back) + 0.05;\n  $fore-lum: _luminance($front) + 0.05;\n\n  @return math.div(math.max($back-lum, $fore-lum), math.min($back-lum, $fore-lum));\n}\n\n/// Verifies that the token overrides exist and are used in one of the given token maps.\n@mixin _validate-token-overrides($overrides: (), $token-maps) {\n  $valid-token-names: ();\n\n  @each $token-map in $token-maps {\n    @each $name, $value in map.get($token-map, tokens) {\n      @if ($value != null and list.index($valid-token-names, $name) == null) {\n        $valid-token-names: list.append($valid-token-names, $name);\n      }\n    }\n  }\n\n  @each $name in map.keys($overrides) {\n    @if (list.index($valid-token-names, $name) == null) {\n      @error (\n        'Invalid token: \"' + $name + '\"'\n        'Valid tokens include: ' $valid-token-names\n      );\n    }\n  }\n}\n\n/// Picks a submap containing only the given keys out the given map.\n/// @param {Map} $map The map to pick from.\n/// @param {List} $keys The map keys to pick.\n/// @return {Map} A submap containing only the given keys.\n@function _pick($map, $keys) {\n  $result: ();\n  @each $key in $keys {\n    @if map.has-key($map, $key) {\n      $result: map.set($result, $key, map.get($map, $key));\n    }\n  }\n  @return $result;\n}\n\n\n/// Filters keys with a null value out of the map.\n/// @param {Map} $map The map to filter.\n/// @return {Map} The given map with all of the null keys filtered out.\n@function _filter-nulls($map) {\n  $result: ();\n  @each $key, $val in $map {\n    @if $val != null {\n      $result: map.set($result, $key, $val);\n    }\n  }\n  @return $result;\n}\n", "@use '@angular/material' as mat;\n@use 'sass:map';\n@use \"sass:math\";\n@include mat.core();\n\n// This file was generated by running 'ng generate @angular/material:m3-theme'.\n// Proceed with caution if making changes to this file.\n\n// Note: Color palettes are generated from primary: #2196f3, secondary: #00bcd4\n$_palettes: (\n  primary: (\n    0: #000000,\n    10: #001d36,\n    20: #003258,\n    25: #003d6a,\n    30: #00497d,\n    35: #005590,\n    40: #0061a4,\n    50: #007bcc,\n    60: #1e95f2,\n    70: #63b0ff,\n    80: #9ecaff,\n    90: #d1e4ff,\n    95: #eaf1ff,\n    98: #f8f9ff,\n    99: #fdfcff,\n    100: #ffffff,\n  ),\n  secondary: (\n    0: #000000,\n    10: #001f25,\n    20: #00363e,\n    25: #00424c,\n    30: #004e59,\n    35: #005b68,\n    40: #006876,\n    50: #008394,\n    60: #009fb4,\n    70: #00bcd4,\n    80: #44d8f1,\n    90: #a1efff,\n    95: #d4f7ff,\n    98: #eefcff,\n    99: #f7fdff,\n    100: #ffffff,\n  ),\n  tertiary: (\n    0: #000000,\n    10: #251431,\n    20: #3b2948,\n    25: #463453,\n    30: #523f5f,\n    35: #5e4b6c,\n    40: #6b5778,\n    50: #846f92,\n    60: #9f89ad,\n    70: #baa3c8,\n    80: #d6bee4,\n    90: #f2daff,\n    95: #fbecff,\n    98: #fff7fd,\n    99: #fffbff,\n    100: #ffffff,\n  ),\n  neutral: (\n    0: #000000,\n    10: #1a1c1e,\n    20: #2f3033,\n    25: #3a3b3e,\n    30: #45474a,\n    35: #515255,\n    40: #5d5e61,\n    50: #76777a,\n    60: #909094,\n    70: #ababae,\n    80: #c6c6ca,\n    90: #e2e2e6,\n    95: #f1f0f4,\n    98: #faf9fc,\n    99: #fdfcff,\n    100: #ffffff,\n    4: #0d0e11,\n    6: #121316,\n    12: #1e2022,\n    17: #282a2d,\n    22: #333538,\n    24: #38393c,\n    87: #dadadd,\n    92: #e8e8eb,\n    94: #eeedf1,\n    96: #f4f3f7,\n  ),\n  neutral-variant: (\n    0: #000000,\n    10: #171c22,\n    20: #2c3137,\n    25: #373c43,\n    30: #43474e,\n    35: #4e535a,\n    40: #5a5f66,\n    50: #73777f,\n    60: #8d9199,\n    70: #a7abb4,\n    80: #c3c7cf,\n    90: #dfe2eb,\n    95: #edf1fa,\n    98: #f8f9ff,\n    99: #fdfcff,\n    100: #ffffff,\n  ),\n  error: (\n    0: #000000,\n    10: #410002,\n    20: #690005,\n    25: #7e0007,\n    30: #93000a,\n    35: #a80710,\n    40: #ba1a1a,\n    50: #de3730,\n    60: #ff5449,\n    70: #ff897d,\n    80: #ffb4ab,\n    90: #ffdad6,\n    95: #ffedea,\n    98: #fff8f7,\n    99: #fffbff,\n    100: #ffffff,\n  ),\n);\n\n$_rest: (\n  secondary: map.get($_palettes, secondary),\n  neutral: map.get($_palettes, neutral),\n  neutral-variant: map.get($_palettes,  neutral-variant),\n  error: map.get($_palettes, error),\n);\n$_primary: map.merge(map.get($_palettes, primary), $_rest);\n$_tertiary: map.merge(map.get($_palettes, tertiary), $_rest);\n\n$dark-theme: mat.define-theme((\n  color: (\n    theme-type: dark,\n    primary: $_primary,\n    tertiary: $_tertiary,\n  ),\n  typography: (\n    plain-family: '\"Exo 2\", sans-serif;',\n    brand-family: '\"Exo 2\", sans-serif;'\n  ),\n));\n\nhtml {\n  @include mat.core-theme($dark-theme);\n  @include mat.toolbar-theme($dark-theme);\n  @include mat.input-theme($dark-theme);\n  @include mat.icon-button-theme($dark-theme);\n  @include mat.button-theme($dark-theme);\n  @include mat.divider-theme($dark-theme);\n  @include mat.expansion-theme($dark-theme);\n  @include mat.grid-list-theme($dark-theme);\n  @include mat.dialog-theme($dark-theme);\n  @include mat.sidenav-theme($dark-theme);\n  @include mat.list-theme($dark-theme);\n  @include mat.button-toggle-theme($dark-theme);\n  @include mat.menu-theme($dark-theme);\n  @include mat.form-field-theme($dark-theme);\n\n  --mdc-dialog-container-shape: 6px;\n  --mat-dialog-container-max-width: 100vw;\n  --mat-standard-button-toggle-shape: 5px;\n  --mdc-outlined-button-container-shape: 6px;\n  --mat-expansion-container-background-color: transparent;\n}\n\n// custom global style:\n\n.mat-mdc-menu-panel {\n  background: hsl(0, 0%, 40%);\n}\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  .mat-mdc-menu-panel {\n    backdrop-filter: blur(10px);\n    background-color: rgba(255, 255, 255, 0.3) !important;\n  }\n}\n\n.mat-mdc-menu-item {\n  color: white;\n  min-width: 150px;\n  padding-left: 30px;\n}\n\n.mat-mdc-menu-item:hover:not([disabled]) {\n  background: rgba(0, 0, 0, 0.09);\n}\n\n// Dialog\n::ng-deep .mat-mdc-dialog-container {\n  .mat-mdc-dialog-title, .mat-mdc-dialog-content {\n    color: white !important;\n  }\n  .mat-mdc-dialog-title {\n    padding-top: 10px !important;\n    padding-right: 10px !important;\n    cursor: move !important;\n    margin-bottom: 0 !important;\n    display: flex !important;\n    align-items: center !important;\n  }\n  .mat-mdc-dialog-content {\n    max-height: calc(90vh);\n  }\n  .mat-mdc-dialog-title .close-button {\n    margin-left: auto !important;\n    font-size: 20px !important;\n    color: rgba(196, 196, 196, 0.6) !important;\n  }\n  .mat-mdc-dialog-title .close-button:hover {\n    color: rgba(196, 196, 196, 0.8) !important;\n  }\n  .mat-mdc-dialog-surface {\n    background: hsl(0, 0%, 40%) !important;\n  }\n  @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n    .mat-mdc-dialog-surface {\n      backdrop-filter: blur(10px) !important;\n      background-color: hsla(0, 0%, 100%, 0.15) !important;\n    }\n  }\n}\n@media only screen and (max-width: 800px) {\n  ::ng-deep {\n    // fullscreen dialog on mobile\n    .celestial-body-dialog-panel, .settings-dialog-panel, .contact-dialog-panel, .about-dialog-panel, .legals-dialog-panel {\n      min-width: unset !important;\n      max-width: unset !important;\n      width: 100% !important;\n      height: 100% !important;\n      margin: 0 !important;\n    }\n    .mat-mdc-dialog-content {\n      max-height: 100% !important;\n    }\n  }\n}\n\n// helper to convert a color to a css filter, to easily change the color af svg element\n// See https://stackoverflow.com/a/68034320/990193\n@mixin recolor($color: #000) {\n  $r: math.div(red($color), 255);\n  $g: math.div(green($color), 255);\n  $b: math.div(blue($color), 255);\n  $a: alpha($color);\n\n  // grayscale fallback if SVG from data url is not supported\n  $lightness: lightness($color);\n  filter: saturate(0%) brightness(0%) invert($lightness) opacity($a);\n\n  // color filter\n  $svg-filter-id: \"recolor\";\n  filter: url('data:image/svg+xml;utf8,\\\n  <svg xmlns=\"http://www.w3.org/2000/svg\">\\\n    <filter id=\"#{$svg-filter-id}\" color-interpolation-filters=\"sRGB\">\\\n      <feColorMatrix type=\"matrix\" values=\"\\\n       0 0 0 0 #{$r}\\\n       0 0 0 0 #{$g}\\\n       0 0 0 0 #{$b}\\\n       0 0 0 #{$a} 0\\\n      \"/>\\\n    </filter>\\\n  </svg>\\\n  ##{$svg-filter-id}');\n}\n\n", "@use './theming/theming';\n@use './theming/inspection';\n@use './theming/validation';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/sass-utils';\n@use './typography/typography';\n@use './tokens/token-utils';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use './tokens/m2/mat/option' as tokens-mat-option;\n@use './tokens/m2/mat/optgroup' as tokens-mat-optgroup;\n@use './tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use './tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n$_has-inserted-loaded-marker: false;\n\n@mixin _theme-loaded-marker {\n  @if not $_has-inserted-loaded-marker {\n    $_has-inserted-loaded-marker: true !global;\n\n    // Marker that is used to determine whether the user has added a theme to their page.\n    // Needs to be generated at the root, because themes may be nested inside classes.\n    @at-root {\n      .mat-theme-loaded-marker {\n        display: none;\n      }\n    }\n  }\n}\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include ripple-theme.base($theme);\n    @include option-theme.base($theme);\n    @include optgroup-theme.base($theme);\n    @include pseudo-checkbox-theme.base($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-unthemable-tokens());\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include ripple-theme.color($theme);\n    @include option-theme.color($theme);\n    @include optgroup-theme.color($theme);\n    @include pseudo-checkbox-theme.color($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-color-tokens($theme));\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include option-theme.typography($theme);\n    @include optgroup-theme.typography($theme);\n    @include pseudo-checkbox-theme.typography($theme);\n    @include ripple-theme.typography($theme);\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include option-theme.density($theme);\n    @include optgroup-theme.density($theme);\n    @include pseudo-checkbox-theme.density($theme);\n    @include ripple-theme.density($theme);\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  $app-tokens: tokens-mat-app.get-token-slots();\n  $ripple-tokens: tokens-mat-ripple.get-token-slots();\n  $option-tokens: tokens-mat-option.get-token-slots();\n  $full-pseudo-checkbox-tokens: tokens-mat-full-pseudo-checkbox.get-token-slots();\n  $minimal-pseudo-checkbox-tokens: tokens-mat-minimal-pseudo-checkbox.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-app.$prefix, tokens: $app-tokens),\n    (prefix: tokens-mat-ripple.$prefix, tokens: $ripple-tokens),\n    (prefix: tokens-mat-option.$prefix, tokens: $option-tokens),\n    (prefix: tokens-mat-full-pseudo-checkbox.$prefix, tokens: $full-pseudo-checkbox-tokens),\n    (prefix: tokens-mat-minimal-pseudo-checkbox.$prefix, tokens: $minimal-pseudo-checkbox-tokens),\n  );\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme, $options...) {\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-app-tokens: token-utils.get-tokens-for($tokens, tokens-mat-app.$prefix, $options...);\n  $mat-ripple-tokens: token-utils.get-tokens-for($tokens, tokens-mat-ripple.$prefix, $options...);\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  $mat-optgroup-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-optgroup.$prefix, $options...);\n  $mat-full-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mat-app.$prefix, $mat-app-tokens);\n  @include token-utils.create-token-values(tokens-mat-ripple.$prefix, $mat-ripple-tokens);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n  @include token-utils.create-token-values(tokens-mat-optgroup.$prefix, $mat-optgroup-tokens);\n  @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n    $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n    $mat-minimal-pseudo-checkbox-tokens);\n}\n", "@use 'src/m3-theme';\n\n:host {\n  display: block;\n}\n\n.symbol {\n  @include m3-theme.recolor(#ffffff);\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n}\n\nmat-dialog-content {\n  img {\n    display: block;\n    margin: auto;\n    padding-bottom: 30px;\n  }\n\n  ul {\n    padding: 0;\n    margin: 0;\n    li {\n      display: flex;\n      margin: 6px;\n    }\n    li span:first-child {\n      padding-right: 7px;\n      order: 1;\n    }\n    li span:last-child {\n      padding-left: 7px;\n      order: 3;\n    }\n    li::after {\n      background-image: radial-gradient(circle, currentcolor 1px, transparent 1.5px);\n      background-position: bottom;\n      background-size: 1ex 4.5px;\n      background-repeat: space no-repeat;\n      content: \"\";\n      flex-grow: 1;\n      height: 1em;\n      order: 2;\n    }\n  }\n}\n"],
  "mappings": "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AAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,kCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,CAAA,0BAAA,CAAA;ACyEJ,cAAA,IAAA,mCAAA,EAAA;;ADzEI,CAAA;AAAA,C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",
  "names": []
}
